% Advent of Code 16.12.2022 https://adventofcode.com/2022/day/16
import util.
scalar_product(LX, LY) = sum([X * Y : {X,Y} in zip(LX, LY)]).

main =>
    Lines = read_file_lines("202216short.txt"), % Problem: "202216.txt"
    N = len(Lines), % println(n=N),
    Cs = [ [Parts[J] : J in [2,6|11..len(Parts)]] : Line in Lines, Parts = Line.split(" =;,")],   
    % foreach(C in Cs) println(C) end,
    Valves = [C[1] : C in Cs], % println(valves=Valves),
    Rate =   [to_int(C[2]) : C in Cs], % println(rate=Rate),
    Edges =  [[I| [find_first_of(Valves, C[J]) : J in 3..len(C)] ] : I in 1..N, C = Cs[I]],
    % foreach(Edge in Edges) println(Edge) end,
    Start =  find_first_of(Valves, "AA"), println(start=Start),
    pressure(1, Start, [0 : _ in 1..N], Result, (Edges, Rate)),
    println(result=Result). /*
not terminating */

table(   +, +, +, max,    nt) 
pressure(T, V, O, Result, (Edges, Rate)), T = 30 =>
    Result = scalar_product(O, Rate).

pressure(T, V, O, Result, (Edges, Rate)) =>
    O1 = copy_term(O), 
    Next = Edges[V], between(1, len(Next), I1), V1 = Next[I1],
    if V1 = V then O[V] = 0, O1[V] := 30 - T end, % open valve V and store remaining time
    pressure(T+1, V1, O1, Result, (Edges, Rate)).